package com.supplytrack;

import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Table;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Table("users") // Maps this entity to a database table named 'users'
public class User implements UserDetails {

    @Id // Marks this field as the primary key
    private Long id;
    private String username;
    private String password; // This will store the *encoded* password
    private String role; // e.g., "ROLE_FARMER", "ROLE_DISTRIBUTOR", "ROLE_RESTAURANT", "ROLE_ADMIN"

    // Constructor for Spring Data JDBC to use when loading from database
    // @PersistenceConstructor is deprecated and no longer needed for single constructors
    public User(Long id, String username, String password, String role) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.role = role;
    }

    // Static factory method for creating NEW User objects (ID will be generated by DB)
    public static User createNewUser(String username, String password, String role) {
        return new User(null, username, password, role);
    }

    // --- Getters and Setters ---
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Override
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    // --- UserDetails Interface Implementations (ALL REQUIRED METHODS) ---

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // Assign roles as authorities for Spring Security
        return List.of(new SimpleGrantedAuthority(role));
    }

    @Override
    public boolean isAccountNonExpired() {
        return true; // For now, accounts never expire
    }

    @Override
    public boolean isAccountNonLocked() {
        return true; // For now, accounts are never locked
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true; // For now, credentials never expire
    }

    @Override
    public boolean isEnabled() {
        return true; // For now, accounts are always enabled
    }
}